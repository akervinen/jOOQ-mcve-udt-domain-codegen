package org.jooq.mcve.test.java.postgres;

import org.jooq.DSLContext;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.postgres.*;
import org.jooq.tools.JooqLogger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.utility.ResourceReaper;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

public class JavaTest {

    static JooqLogger             log = JooqLogger.getLogger(JavaTest.class);
    static PostgreSQLContainer<?> db;
    static Connection             connection;
    static DSLContext             ctx;

    @BeforeClass
    public static void init() throws SQLException {
        if (System.getProperty("db.url") == null) {
            db = new org.testcontainers.containers.PostgreSQLContainer<>("postgres:latest")
                 .withUsername("postgres")
                 .withDatabaseName("postgres")
                 .withPassword("postgres")
                 .withInitScript("db/migration/init.sql");

            db.start();
            System.setProperty("db.url", db.getJdbcUrl());
            System.setProperty("db.username", db.getUsername());
            System.setProperty("db.password", db.getPassword());
        }

        Properties properties = new Properties();
        properties.setProperty("username", "postgres");
        properties.setProperty("password", "postgres");

        log.info("Connecting");
        connection = DriverManager.getConnection(
            System.getProperty("db.url"),
            System.getProperty("db.username"),
            System.getProperty("db.password")
        );

        ctx = DSL.using(connection, SQLDialect.POSTGRES);

        // Use JDBC directly instead of jOOQ to avoid DEBUG logging all of this
        try (Statement s = connection.createStatement()) {
            log.info("Finished setup");
        }
    }

    @AfterClass
    public static void end() {
        if (db != null) {
            ResourceReaper.instance().stopAndRemoveContainer(db.getContainerId(), db.getDockerImageName());
        }
    }

    @Before
    public void setup() throws Exception {
    }

    @After
    public void after() throws Exception {
    }

    @Test
    public void mcveTest() {
//        Tables.TEST.QUZ.toString(); // Works
//        Keys.PK_TEST.toString(); // Works
        Domains.BAZ.toString(); // Fails: Cannot invoke "org.jooq.Domain.getDataType()" because "org.jooq.mcve.java.postgres.Domains.BAZ" is null
//        Tables.TEST.toString(); // Works
//        UDTs.FOO.toString(); // Works
//        Mcve.MCVE.toString(); // Works
    }
}
